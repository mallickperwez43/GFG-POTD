/* Tree node structure  used in the program

struct Node {
    int data;
    Node *left;
    Node *right;

    Node(int val) {
        data = val;
        left = right = NULL;
    }
};*/

class NodeValue{
    public:
    int maxVal, minVal, maxSize;
    NodeValue(int minVal, int maxVal, int maxSize){
        this -> minVal = minVal;
        this -> maxVal = maxVal;
        this -> maxSize = maxSize;
    }
};

class Solution{
    public:
    NodeValue helper(Node *root){
        // base case
        if(root == NULL) return NodeValue(INT_MAX, INT_MIN, 0);
        
        // Recursive call
        NodeValue left = helper(root -> left);
        NodeValue right = helper(root -> right);
        
        // BST 
        if(left.maxVal < root -> data && root -> data < right.minVal){
            return NodeValue(min(root -> data, left.minVal), max(root -> data, right.maxVal), left.maxSize + right.maxSize + 1);
        }
        
        return NodeValue(INT_MIN, INT_MAX, max(left.maxSize, right.maxSize));
    }
    /*You are required to complete this method */
    // Return the size of the largest sub-tree which is also a BST
    int largestBst(Node *root)
    {
    	//Your code here
    	return helper(root).maxSize;
    }
};

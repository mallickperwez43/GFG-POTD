// User function template for C++

class Solution {
  public:
    // Function to find maximum of each subarray of size k.
    vector<int> max_of_subarrays(int k, vector<int> &arr) {
        // your code here
        
        vector<int> ans;
        deque<int> dq; // store index
        
        for(int i = 0; i < arr.size(); i++){
            if(dq.size() && dq.front() == i - k){ // shrink
                dq.pop_front();
            }
             
            // no use of keeping the smaller if you meet greater  
            while(dq.size() && arr[dq.back()] <= arr[i]){
                dq.pop_back();
            }
            
            // push the current index
            dq.push_back(i);
            
            // check if k size is reach or even beyond
            if(i >= k - 1){
                ans.push_back(arr[dq.front()]);
            }
        }
        
        return ans;
    }
};

// TC : O(n);
// SC : O(k);

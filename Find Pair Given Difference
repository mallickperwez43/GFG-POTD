// Method 1 : Two Pointer

class Solution {
  public:
    int findPair(int n, int x, vector<int> &arr) {
        // code here
        
        sort(arr.begin(), arr.end());
        
        int i = 0 , j = 1;
        
        while(i < n and j < n){
            int diff = arr[j] - arr[i];
            
            // since no duplicate element 
            // to handle the case where x = 0 , arr[] = 1, 2, 3, 4, 5
            // i at 0 j at 1 so diff is 2 - 1 = 1 
            // diff > x i++
            // i at 1 and j at 1 so diff 0 but we dont want that because no duplicate
            
            if(i != j and diff == x)  
                return 1;
            else if(diff < x)
                j++;
            else
                i++;
        }
        return -1;
    }
};

// TC : O(n)
// SC : O(1)


// Method 2 : Set

class Solution {
  public:
    int findPair(int n, int x, vector<int> &arr) {
        // code here
        
        unordered_set<int> st;
        
        for(int i = 0; i < n; i++){
            if(st.find(arr[i] - x) != st.end() or st.find(arr[i] + x) != st.end()){
                return 1;
            }
            else
                st.insert(arr[i]);
        }
        return -1;
    }
};

// TC : O(n)
// SC : O(n)

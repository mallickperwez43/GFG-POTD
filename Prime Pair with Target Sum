class Solution {
  public:
    vector<int> getPrimes(int n) {
        // code here
        // make all the prime no from 2 to n(sieve of eratosthenes)
        vector<bool> isPrime(n + 1, true);
        isPrime[0] = false;
        isPrime[1] = false;
        
        for(int i = 2; i * i <= n; i++){
            if(isPrime[i]){
                for(int j = i * i; j <= n; j += i) 
                    isPrime[j] = false;
            }
        }
        
        // iterate the boolean array and get the smallest pair 
        for(int i = 2; i <= n; i++){
            if(isPrime[i] and isPrime[n - i])
                return {i, n - i};
        }
        
        return {-1, -1};
    }
};

// TC : O(n * log(log(n)))
// SC : O(n)

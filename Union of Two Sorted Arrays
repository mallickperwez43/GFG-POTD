// method 1 -> two pointers and last element check

class Solution{
public:
    // Function to return a list containing the union of the two arrays.
    // arr1, arr2: the arrays
    // n, m: size of arrays
    vector<int> findUnion(int arr1[], int arr2[], int n, int m) {
        // Initialize a vector to store the union of the arrays
        vector<int> ans;
        
        // Initialize indices for both arrays
        int i = 0, j = 0;
        
        // Traverse both arrays simultaneously
        while (i < n and j < m) {
            // If element in arr1 is smaller, add it to the union
            if (arr1[i] < arr2[j]) {
                // Add element only if it's not already present in the union
                if (ans.empty() or ans.back() != arr1[i]) {
                    ans.push_back(arr1[i]);
                }
                i++; // Move to the next element in arr1
            }
            // If element in arr2 is smaller, add it to the union
            else if (arr1[i] > arr2[j]) {
                // Add element only if it's not already present in the union
                if (ans.empty() or ans.back() != arr2[j]) {
                    ans.push_back(arr2[j]);
                }
                j++; // Move to the next element in arr2
            }
            // If elements are equal, add one of them to the union
            else {
                // Add element only if it's not already present in the union
                if (ans.empty() or ans.back() != arr1[i]) {
                    ans.push_back(arr1[i]);
                }
                // Move to the next element in both arrays
                i++;
                j++;
            }
        }
        
        // Add remaining elements of arr1 to the union
        while (i < n) {
            // Add element only if it's not already present in the union
            if (ans.empty() or ans.back() != arr1[i]) {
                ans.push_back(arr1[i]);
            }
            i++; // Move to the next element in arr1
        }
        
        // Add remaining elements of arr2 to the union
        while (j < m) {
            // Add element only if it's not already present in the union
            if (ans.empty() or ans.back() != arr2[j]) {
                ans.push_back(arr2[j]);
            }
            j++; // Move to the next element in arr2
        }
        
        // Return the final union of the arrays
        return ans;
    }
};

// method 2 -> using set

class Solution{
    public:
    //arr1,arr2 : the arrays
    // n, m: size of arrays
    //Function to return a list containing the union of the two arrays. 
    vector<int> findUnion(int arr1[], int arr2[], int n, int m)
    {
        //Your code here
        //return vector with correct order of elements
        set<int> s;  // set banaya
        
        for(int i = 0 ; i < n ; i++)    // arr1 ki traversing kiye aur set me dalte gaye
        {
            s.insert(arr1[i]);
        }
        
        for(int j = 0 ; j < m ; j++)   // arr2 ki traversing kiye aur set me dalte gaye 
        {
            s.insert(arr2[j]);
        }
        
         // vector me dalke bhej diye
        vector<int> ans;
        {
            for(int x : s)
            {
                ans.push_back(x);
            }
        }
        
        return ans;
    }
};

// TC : O(n + m)
// SC : O(n + m)

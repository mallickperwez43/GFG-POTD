class Solution{
private:
    void helper(vector<int> &arr, int n, int k, int index, int sum, vector<int> &temp, set<vector<int>> &s){
        // base case
        if(sum == k){
            s.insert(temp);
            return;
        }
        // out of bound 
        if(index == n)
            return;
            
        // non pick
        helper(arr, n, k, index + 1, sum, temp, s);
        
        // pick
        if(sum + arr[index] <= k){
            temp.push_back(arr[index]);   // add to temp
            helper(arr, n, k, index + 1, sum + arr[index], temp, s); // next call 
            temp.pop_back(); // backtrack so that it doesnt affect for another call
        }
    }
public:
    vector<vector<int>> CombinationSum2(vector<int> arr,int n,int k)
    {
        //code here
        sort(arr.begin(), arr.end()); // sort the array to pick in increasing order
        
        // make vector and set to store the combinations and the store to set
        vector<int> curCombination;
        set<vector<int>> st;
        
        // call
        helper(arr, n, k, 0, 0, curCombination, st);
        
        // add the members of set to ans
        vector<vector<int>> ans(st.begin(), st.end());
        
        return ans;
    }
};

// TC : O(2^n)
// SC : O(U * S)  U -> no of combinations , s -> avg size of combinations 

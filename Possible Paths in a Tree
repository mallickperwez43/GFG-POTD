//User function template for C++

class Solution{
    int ans; 
    private:
    
    //Funtion to find thee root of the given element in the disjoint set
    int root(int i, vector<int> &parent){  // for referance -> find function int the original DSU
        while(parent[i] != i){
            parent[i] = parent[parent[i]];
            i = parent[i];
        }
        return i;
    }
    
    // Function  to perform union operation of two sets and return the resulting size of the set
    int Union(int a, int b, vector<int> &parent, vector<int> &sz){
        int ra = root(a, parent);
        int rb = root(b, parent);
        
        // if the roots are the same , it means they are already int same set,
        // so return the current size of the set
        if(ra == rb)
            return sz[ra] * sz[rb];
            
        // if the size of the set containing a is smaller than that of the size of the set containing b
        // swap a and b
        if(sz[ra] < sz[rb]){
            swap(ra, rb);
            swap(a, b);
        }
        
        // merge the two sets by updating the parent and size
        ans += sz[ra] * sz[rb];
        parent[rb] = ra;
        sz[ra] += sz[rb];
        
        return ans;
    }
    
	public:
	vector<int> maximumWeight(int n, vector<vector<int>> edges, int q, vector<int> &queries)
	{
	    // code here
	    ans = 0;
	    
	    vector<int> parent(n + 1, 0), sz(n + 1, 0);
	    for(int i = 0 ; i <= n; i++){
	        // intializing each element as its own parent and size as 1
	        parent[i] = i;
	        sz[i] = 1;
	    }
	    
	    // creating a vector of pairs to store the weights and the endpoints of the edges
	    vector<pair<int, pair<int, int>>> wt;
	    for(int i = 0; i < n - 1; i++)
	        wt.push_back({edges[i][2], {edges[i][0], edges[i][1]}});
	       
	    // sorting the edges based on their weights in asecnding order.
	    sort(wt.begin(), wt.end());
	    
	    // creating a map to store the maximum weight of the connected component with weights 
	    // less than or equal to each query
	    map<int, int> mp;
	    
	    // iterating through the sorted edges and performimg union opeartion
	    for(int i = 0; i < n -1; i++){
	        int a = wt[i].first;
	        int b = wt[i].second.first;
	        int c = wt[i].second.second;
	        
	        // updating the map with maximum weight of the connected component after each query
	        mp[a] = Union(b, c, parent, sz);
	    }
	    
	    // creating  a vector to store the results for each query
	    vector<int> res;
	    
	    // iterating through each query and finding the maximum weight with weights less than or equal to query
	    for(int i = 0; i < q; i++){
	        
	        // finding the element in the map which is judt greater than the query
	        auto val = mp.upper_bound(queries[i]);
	        if(val == mp.begin())
	            res.push_back(0); // if there is no such element than maximum weight is zero
	        else{
	            val--;
	            res.push_back(val -> second); // storing the maximum weight for the query
	        }
	    }
	    return res;
	}
};
TC : O(nlogn + qlogn)
SC : O(n)

//method 1 Recursion
class Solution
{
    public:
        int solve(int n){
            if(n == 0) return 0;
            
            int a = max(n/2, solve(n/2));
            int b = max(n/3, solve(n/3));
            int c = max(n/4, solve(n/4));
            return a + b + c;
        }
        int maxSum(int n)
        {
            //code here.
            int a = solve(n);
            return max(a, n);
        }
};

// method 2 DP
class Solution
{
    public:
        int maxSum(int n)
        {
            //code here.
            vector<int> dp(n + 1, 0);
            
            for(int i = 1; i <= n; i++){
                int curSum = i / 2 + i / 3 + i / 4;
                
                if(curSum > i){
                    int nextSum = dp[i / 2] + dp[i / 3] + dp[i / 4];
                    
                    dp[i] = max(nextSum, curSum);
                }
                else dp[i] = i;
            }
            
            return dp[n];
        }
};

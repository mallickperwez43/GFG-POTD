class Solution {
  public:
    int kthElement(int k, vector<int>& arr1, vector<int>& arr2) {
        // code here
        int n = arr1.size();
        int m = arr2.size();
        
        int i = 0;
        int j = 0;
        
        vector<int> merge;
        
        while(i < n && j < m){
            if(arr1[i] < arr2[j]){
                merge.push_back(arr1[i]);
                i++;
            }
            else{
                merge.push_back(arr2[j]);
                j++;
            }
            
            if(merge.size() == k){
                break;
            }
        }
        
        while(i < n){
            merge.push_back(arr1[i]);
            i++;
            if(merge.size() == k){
                break;
            }
        }
        
        while(j < m){
            merge.push_back(arr2[j]);
            j++;
            if(merge.size() == k){
                break;
            }
        }
        
        return merge[k - 1];
    }
};

// TC : O(k)
// SC : O(k)


// method 2 
class Solution {
  public:
    int kthElement(int k, vector<int>& arr1, vector<int>& arr2) {
        // code here
        int n = arr1.size();
        int m = arr2.size();
        
        int i = 0;
        int j = 0;
        
        int kthEl = -1;
        
        while(i < n && j < m){
            if(arr1[i] < arr2[j]){
                kthEl = arr1[i];
                i++;
            }
            else{
                kthEl = arr2[j];
                j++;
            }
            k--;
            
            if(k == 0){
                return kthEl;
            }
        }
        
        while(i < n){
            kthEl = arr1[i];
            i++;
            k--;
            if(k == 0){
                return kthEl;
            }
        }
        
        while(j < m){
            kthEl = arr2[j];
            j++;
            k--;
            if(k == 0){
                return kthEl;
            }
        }
        
        return -1;
    }
};

// TC : O(k)
// SC : O(1)

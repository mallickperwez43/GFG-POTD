// User function template for C++

class Solution {
  public:
    bool isSafe(int x, int y, int n, vector<vector<int>> &mat, vector<vector<int>> &vis){
        if(x < 0 || x >= n || y < 0 || y >= n || vis[x][y] == 1 || mat[x][y] == 0){
            return false;
        }
        return true;
    }
    
    void solve(vector<vector<int>> &mat, vector<string> &ans, int x, int y, string path, vector<vector<int>> &vis, int n){
        // base case
        if(x == n - 1 && y == n - 1){
            ans.push_back(path);
            return;
        }
        
        vis[x][y] = 1;
        
        // Down
        int newX = x + 1;
        int newY = y;
        if(isSafe(newX, newY, n, mat, vis)){
            path.push_back('D');
            solve(mat, ans, newX, newY, path, vis, n);
            path.pop_back();
        }
        
        // Left
        newX = x;
        newY = y - 1;
        if(isSafe(newX, newY, n, mat, vis)){
            path.push_back('L');
            solve(mat, ans, newX, newY, path, vis, n);
            path.pop_back();
        }
        
        // Right
        newX = x;
        newY = y + 1;
        if(isSafe(newX, newY, n, mat, vis)){
            path.push_back('R');
            solve(mat, ans, newX, newY, path, vis, n);
            path.pop_back();
        }
        
        // Up
        newX = x - 1;
        newY = y;
        if(isSafe(newX, newY, n, mat, vis)){
            path.push_back('U');
            solve(mat, ans, newX, newY, path, vis, n);
            path.pop_back();
        }
        
        vis[x][y] = 0;
    }
    
    vector<string> findPath(vector<vector<int>> &mat) {
        // Your code goes here
        int n = mat.size();
        vector<string> ans;
        
        // base conditon
        if(mat[0][0] == 0){
            return ans;
        }
        
        vector<vector<int>> visited(n, vector<int>(n, 0));
        
        int srcX = 0;
        int srcY = 0;
        string path = "";
        
        solve(mat, ans, srcX, srcY, path, visited, n);
        
        return ans;
    }
};

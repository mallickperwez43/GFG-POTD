class Solution {
  public:
    int getMinDiff(int arr[], int n, int k) {
        // code here
        sort(arr,arr+n);
        int ans = arr[n-1] - arr[0];
        int smallest = arr[0] + k;
        int largest = arr[n-1] - k;
        int mini , maxi;
        for(int i = 0 ; i < n-1 ; i++){
            mini = min(smallest , arr[i+1]-k);
            maxi = max(largest , arr[i]+k);
            if(mini < 0) continue;
            ans = min(ans, maxi - mini);
        }
        return ans;
    }
};

// method 2

class Solution {
  public:
    int getMinDiff(vector<int> &arr, int k) {
        // code here  
        int n = arr.size();
        if(n == 1) return 0;
        
        sort(arr.begin(), arr.end());
        
        int ans = arr[n - 1] - arr[0];
        
        int longest = arr[n - 1] - k;
        int smallest = arr[0] + k;
        int mini, maxi;
        
        for(int i = 1; i < n; i++){
            mini = min(smallest, arr[i] - k);
            maxi = max(longest, arr[i - 1] + k);
            
            if(mini < 0) continue;
            
            ans = min(ans, maxi - mini);
        }
        
        return ans;
    }
};

class Solution {
  public:
    int editDistance(string str1, string str2) {
        int n = str1.length();
        int m = str2.length();
        
        int dp[n + 1][m + 1];
        
        // Initialize the first row and first column
        for(int i = 0; i <= n; i++){
            dp[i][0] = i; // Cost of converting str1 to an empty string
        }
        for(int j = 0; j <= m; j++){
            dp[0][j] = j; // Cost of converting an empty string to str2
        }
        
        // Fill the dp array
        for(int i = 1; i <= n; i++){
            for(int j = 1; j <= m; j++){
                if(str1[i - 1] == str2[j - 1]){
                    dp[i][j] = dp[i - 1][j - 1]; // Characters match, no operation needed
                }
                else{
                    int insertAns = 1 + dp[i][j - 1];    // Cost of insertion
                    int removeAns = 1 + dp[i - 1][j];    // Cost of removal
                    int replaceAns = 1 + dp[i - 1][j - 1]; // Cost of replacement
                    dp[i][j] = min({insertAns, removeAns, replaceAns}); // Minimum cost operation
                }
            }
        }
        
        return dp[n][m]; // Minimum edit distance
    }
};

// TC : O(n*m)
// SC : O(n*m)

class Solution {
  public:
    // Function to find the smallest positive number missing from the array.
    int missingNumber(vector<int> &arr) {
        // Your code here
        
        // ans range is [1 - n] or [1 - n  + 1]
        int n = arr.size();
        for(int i = 0; i < n; i++){
            if(arr[i] > 0 && arr[i] <= n && arr[i] != arr[arr[i] - 1]){
                swap(arr[i], arr[arr[i] - 1]);
                i--; // new element so process this new element too
            }
        }
        
        // reach here so 1 at 0 2 at 1.. 
        for(int i = 0; i < n; i++){
            if(arr[i] != i + 1){
                return i + 1;
            }
        }
        
        return n + 1;
    }
};

//{ Driver Code Starts.

// int missingNumber(int arr[], int n);

int main() {

    // taking testcases
    int t;
    cin >> t;
    cin.ignore();
    while (t--) {

        vector<int> arr;
        string input;
        getline(cin, input);
        stringstream ss(input);
        int number;
        while (ss >> number) {
            arr.push_back(number);
        }

        Solution ob;
        int result = ob.missingNumber(arr);
        cout << result << "\n";
    }
    return 0;
}

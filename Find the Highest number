class Solution {
public:
    int findPeakElement(vector<int>& a) 
    {
        // Code here.
        
        int low = 0, high = a.size() - 1, mid = -1, n = a.size();
        
        bool temp1 = false, temp2 = false, temp3 = false;
        
        while(low <= high){
            mid = low + (high - low) / 2;
            
            // keep the checks for edge element otherwise consider them as true if at edge
            temp1 = mid != n - 1 ? a[mid] > a[mid + 1] : true;
            temp2 = mid != 0 ? a[mid] > a[mid - 1] : true;
            temp3 = mid != 0 ? a[mid] < a[mid - 1] : true;
            
            if(temp1 and temp2){
                break;
            }
            else if(temp1 and temp3){
                high = mid - 1;
            }
            else
                low = mid + 1;
        }
        
        return a[mid];
    }
};

// TC : O(logn)
// SC : O(1)

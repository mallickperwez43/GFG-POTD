//User function Template for C++

/* Tree node structure  used in the program
 struct Node
 {
     int data;
     Node* left, *right;
}; */

void solve(Node* node, vector<int> &ans){
    // base case
    if(node == NULL)
        return;
    
    // both child exist
    if(node -> left and node -> right){
        solve(node -> left, ans);
        solve(node -> right, ans);
    }
    else if(node -> left){
        // only left child
        ans.push_back(node -> left -> data);
        solve(node -> left, ans);
    }
    else if(node -> right){
        // only right child
        ans.push_back(node -> right -> data);
        solve(node -> right, ans);
    }
} 


vector<int> noSibling(Node* node)
{
    // code here
    
    vector<int> ans;
    
    solve(node, ans);
    
    // edge case
    if(!ans.size()) ans.push_back(-1);
    
    sort(ans.begin(), ans.end());
    
    return ans;
}

// TC : O(n)
// SC : O(n)

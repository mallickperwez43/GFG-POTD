class DisjointSet{
  public:
    vector<int> parent, size;
    DisjointSet(int n){
        parent.resize(n + 1);
        size.resize(n + 1);
        for(int i = 0; i <= n; i++){
            parent[i] = i; // self parent
            size[i] = 1; // size 1
        }
    }
        
    int findUlPar(int node){
        // if node is parent itself then return else find parent
        if(node == parent[node]) return node;
        return parent[node] = findUlPar(parent[node]);
    }
        
    void unionBySize(int u, int v){
        int ulp_u = findUlPar(u);
        int ulp_v = findUlPar(v);
            
        // same -> return -> already connected
        if(ulp_u == ulp_v) return;
            
        // whos size is bigger set it the parent of another and add in size
        if(size[ulp_u] < size[ulp_v]){
            parent[ulp_u] = ulp_v;
            size[ulp_v] += size[ulp_u];
        }
        else{
            parent[ulp_v] = ulp_u;
            size[ulp_u] += size[ulp_v];
        }
    }
};

class Solution {
  public:
    bool isValid(int r, int c, int n){
        if(r < 0 or r >= n or c < 0 or c >= n){
            return false;
        }
        return true;
    }
    
    int MaxConnection(vector<vector<int>>& grid) {
        // code here
        int n = grid.size();
        DisjointSet ds(n * n);
        
        // step 1 : make disjoint set of connected components by UnionBySize exlporing all 4 direction
        for(int row = 0; row < n; row++){
            for(int col = 0; col < n; col++){
                if(grid[row][col] == 0) continue;
                int dirR[] = {-1, 0, 1, 0};
                int dirC[] = {0, -1, 0, 1};
                for(int ind = 0; ind < 4; ind++){
                    int newR = row + dirR[ind];
                    int newC = col + dirC[ind];
                    if(isValid(newR, newC, n) && grid[newR][newC] == 1){
                        int nodeNo = row * n + col;
                        int adjNodeNo = newR * n + newC;
                        ds.unionBySize(nodeNo, adjNodeNo);
                    }
                }
            }
        }
        
        // step 2 : try converting 0 to 1 and maximize the no of connected components
        // just simply by adding the size of CC
        int ans = 0;
        for(int row = 0; row < n; row++){
            for(int col = 0; col < n; col++){
                if(grid[row][col] == 1) continue;
                int dirR[] = {-1, 0, 1, 0};
                int dirC[] = {0, -1, 0, 1};
                set<int> compParent; // to store the compoment parent
                for(int ind = 0; ind < 4; ind++){
                    int newR = row + dirR[ind];
                    int newC = col + dirC[ind];
                    if(isValid(newR, newC, n)){
                        if(grid[newR][newC] == 1){
                            compParent.insert(ds.findUlPar(newR * n + newC));
                        }
                    }
                }
                int totalSize = 0;
                // iterate the set and add the components size
                for(auto it : compParent){
                    totalSize += ds.size[it];
                }
                ans = max(ans, totalSize + 1);
            }
        }
        
        // edge case all 1s in matrix
        for(int cellNo = 0; cellNo < n * n; cellNo++){
            ans = max(ans, ds.size[ds.findUlPar(cellNo)]);
        }
        
        return ans;
    }
};

// TC : O(n * n)
// SC : O(n * n)

// User function Template for C++

class Solution {
    private:
    vector<int> topoSort(int V, vector<int> adj[]){
        // make indegree
        int indegree[V] = {0};
        for(int i = 0; i < V; i++){
            for(auto it : adj[i]){
                indegree[it]++;
            }
        }
            
        queue<int> q;
        // push all those nodes whos indegree is zero
        for(int i = 0; i < V; i++){
            if(indegree[i] == 0){
                q.push(i);
            }
        }
            
        // topo
        vector<int> topo;
        while(!q.empty()){
            int node = q.front();
            q.pop();
                
            topo.push_back(node);
                
            // node is in your topo sort
            // so please remove it from the indegree
            for(auto it : adj[node]){
                indegree[it]--;
                if(indegree[it] == 0){
                    q.push(it);
                }
            }
        }
        
        return topo;
    }
    public:
    string findOrder(string dict[], int n, int k) {
        // code here
        // Step 1 : create adj List
        vector<int> adj[k];
        for(int i = 0; i < n - 1; i++){
            string s1 = dict[i];
            string s2 = dict[i + 1];
            
            // compare character
            int len = min(s1.length(), s2.length());
            for(int ptr = 0; ptr < len; ptr++){
                if(s1[ptr] != s2[ptr]){
                    adj[s1[ptr] - 'a'].push_back(s2[ptr] - 'a');
                    break;
                }
            }
        }

        // Step 2 : topological sort
        vector<int> topo = topoSort(k, adj);

        // Step 3 : form  ans
        string ans = "";
        for(auto it : topo){
            ans = ans + char(it + 'a');
        }
        
        return ans;
    }
};

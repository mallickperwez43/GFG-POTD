class Solution {
  public:
    void dfs(int i, int j, vector<vector<char>>& grid, vector<vector<bool>>& vis){
        if(i < 0 || i >= grid.size() || j < 0 || j >= grid[0].size() || grid[i][j] == '0' || vis[i][j]){
            return;
        }
        
        vis[i][j] = true;
        
        dfs(i, j + 1, grid, vis);
        dfs(i, j - 1, grid, vis);
        dfs(i + 1, j, grid, vis); 
        dfs(i - 1, j, grid, vis);
        dfs(i - 1, j - 1, grid, vis);
        dfs(i - 1, j + 1, grid, vis);
        dfs(i + 1, j - 1, grid, vis);
        dfs(i + 1, j + 1, grid, vis);
    }
    // Function to find the number of islands.
    int numIslands(vector<vector<char>>& grid) {
        // Code here
        
        int n = grid.size();
        int m = grid[0].size();
        
        vector<vector<bool>> vis(n, vector<bool>(m, false));
        int islands = 0;
        
        for(int i = 0; i < n; i++){
            for(int j = 0; j < m; j++){
                if(grid[i][j] == '1' && !vis[i][j]){
                    dfs(i, j, grid, vis);
                    islands++;
                }
            }
        }
        
        return islands;
    }
};

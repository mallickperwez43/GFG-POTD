class Solution {
  public:
    int helper(string pattern, string str, int i, int j, vector<vector<int>>& dp){
        if(i == pattern.length() && j == str.length()) return 1;
        if(i == pattern.length()) return 0;
        if(j == str.length() && pattern[i] == '*') return helper(pattern, str, i + 1, j, dp);
        if(j == str.length()) return 0;
        if(pattern[i] != '?' && pattern[i] != '*' and pattern[i] != str[j]) return 0;
        if(dp[i][j] != -1) return dp[i][j];
        
        int empty = 0;
        int one = 0;
        int multiple = 0;
        
        if(pattern[i] == '*'){
            empty = helper(pattern, str, i + 1, j, dp);
            multiple = helper(pattern, str, i, j + 1, dp);
        }
        one = helper(pattern, str, i + 1, j + 1, dp);
        
        return dp[i][j] = empty | one | multiple;
    }
    
    /*You are required to complete this method*/
    int wildCard(string pattern, string str) {
        // code here
        vector<vector<int>> dp(pattern.length(), vector<int>(str.length(), -1));
        return helper(pattern, str, 0, 0, dp);
    }
};

/*
    INTUTION
        minimize the search space -> minimizing the diff
    
    Approach
        USING BINARY SEARCH
        maintain a minDiff as INT_MAX so to keep a track of diff at evry point 
        and also ans as some random value
        
        calulate mid and curDiff
        
        // minimizing the diff
        (curDiff <= minDiff) -> 2 cases : 1] both equal so maximize the ans , 2] if curDiff is less arr[mid] can
        be possible ans 
        update minDiff
        
        // reducing search space
        mid element is less than the k -> move right
        mid element is greater than k -> move left
*/

class Solution{
    public:
    int findClosest( int n, int k,int arr[]) 
    { 
        // Complete the function
        int low = 0, high = n - 1, ans = -1, minDiff = INT_MAX;
        
        while(low <= high){
            int mid = low + (high - low) / 2;
            int diff = abs(arr[mid] - k);
            if(diff <= minDiff){
                if(diff == minDiff) ans = max(ans, arr[mid]);
                else ans = arr[mid];
                
                minDiff = diff;
            }
            
            if(arr[mid] <= k) low = mid + 1;
            else high = mid - 1;
        }
        
        return ans;
    } 
};

// TC : O(logn)
// SC : O(1)

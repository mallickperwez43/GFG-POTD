// Method 1 : dp

class Solution {
  public:
    
    long long mod = 1e9+7;
    
    long long power(long long a, long long b){
        long long ans = 1;
        
        while(b > 0){
            if(b & 1){
                ans *= a;
                ans %= mod;
            }
            a *= a;
            a %= mod;
            b >>= 1;
        }
        
        return ans;
    }
    
    int numberOfConsecutiveOnes(int n) {
        // code here
        
        vector<int> a(n);   // no of string of length i + 1 ending at '0' without consecutive 1 
        vector<int> b(n);   // no of string of length i + 1 ending at '1' without consecutive 1 
        
        a[0] = 1, b[0] = 1;
        
        for(int i = 1; i < n; i++){
            a[i] = (a[i - 1] + b[i - 1]) % mod;  // can take 0 as ending and also 1 as ending
            b[i] = a[i - 1] % mod;  //  can only take 0 as ending  so not to be consecutive 1s 
        }
        
        // 2^n is possible and we have number of non consecutive string(2^n - x) 
        return (power(2, n) + mod - (a[n - 1] + b[n - 1]) % mod) % mod;
        // added mod to maintain power from being negative
    }
};

// TC : O(n)
// SC : O(n)


// Method 2 : Pattern Observation 

class Solution {
  public:
    int numberOfConsecutiveOnes(int n) {
        // code here
        // base case
        if(n == 2) return 1;
        
        int prev = 0, prev1 = 1, ans  = 1, mod = 1e9+7;
        
        for(int i = 3; i <= n; i++){
            int cur = (prev + prev1) % mod;
            prev = prev1;
            prev1 = cur;
            
            ans = ((ans * 2) % mod + cur) % mod;
        }
        
        return ans;
    }
};

// TC : O(n)
// SC : O(1)

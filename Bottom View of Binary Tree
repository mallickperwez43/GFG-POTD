//Function to return a list containing the bottom view of the given tree.

class Solution {
  public:
    vector <int> bottomView(Node *root) {
        // Your Code Here
        vector<int> ans;
        
        if(root == NULL){
            return ans;
        }
        
        unordered_map<int, int> bottomNode;
        queue<pair<Node*, int>> q;
        
        q.push(make_pair(root, 0));
        int mini = 0;
        int maxi = 0;
        
        while(!q.empty()){
            pair<Node*, int> top = q.front();
            q.pop();
            
            Node* cur = top.first;
            
            int nodeVal = cur -> data;
            int hd = top.second;
            
            bottomNode[hd] = nodeVal;
            mini = min(mini, hd);    
            maxi = max(maxi, hd);
            
            if(cur -> left){
                q.push(make_pair(cur -> left, hd - 1));
            }
            
            if(cur -> right){
                q.push(make_pair(cur -> right, hd + 1));
            }
        }
        
        for(int i = mini; i <= maxi; i++){
            ans.push_back(bottomNode[i]);   
        }
        
        return ans;
    }
};

// TC : O(n)
// SC : O(n)

class Solution {
  public:
    vector<int> spirallyTraverse(vector<vector<int> > &matrix) {
        // code here
        int n = matrix.size();
        int m = matrix[0].size();
        
        int count = 0;
        int allElements = n * m;
        vector<int> ans;
        
        int startRow = 0;
        int endRow = n - 1;
        int startCol = 0;
        int endCol = m - 1;
     
        while(count < allElements){
            // first row
            // startCol -> endCol
            for(int i = startCol; i <= endCol && count < allElements; i++){
                ans.push_back(matrix[startRow][i]);
                count++;
            }
            startRow++;
            
            // last col
            // startRow -> endRow
            for(int i = startRow; i <= endRow && count < allElements; i++){
                ans.push_back(matrix[i][endCol]);
                count++;
            }
            endCol--;
            
            // reverse end row
            // endCol -> startCol
            for(int i = endCol; i >= startCol && count < allElements; i--){
                ans.push_back(matrix[endRow][i]);
                count++;
            }
            endRow--;
            
            // reverse start col
            // endRow -> startRow
            for(int i = endRow; i >= startRow && count < allElements; i--){
                ans.push_back(matrix[i][startCol]);
                count++;
            }
            startCol++;
        }
        
        return ans;
    }
};

// TC : O(n * n)
// SC : O(n * n)

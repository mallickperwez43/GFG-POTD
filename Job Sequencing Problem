/*
struct Job 
{ 
    int id;	 // Job Id 
    int dead; // Deadline of job 
    int profit; // Profit if job is over before or on deadline 
};
*/

class Solution 
{
    public:
    bool static comp(Job a, Job b){
        return a.profit > b.profit;
    }
    //Function to find the maximum profit and the number of jobs done.
    vector<int> JobScheduling(Job arr[], int n) 
    { 
        // your code here
        
        // sort wrt profit
        sort(arr, arr + n, comp);
        
        // get the maximum deadline
        int maxi = arr[0].dead;
        for(int i = 0; i < n; i++) maxi = max(maxi, arr[i].dead);
        
        // make an array of slot size equal to maxi + 1
        int slot[maxi + 1];
        for(int i = 0; i <= maxi; i++) slot[i] = -1;
        
        int countJobs = 0;
        int jobProfit = 0;
        
        // go greedily -> take the work if your slot is busy check for prev free slots
        for(int i = 0; i < n; i++){
            for(int j = arr[i].dead; j > 0; j--){
                if(slot[j] == -1){
                    slot[j] = i; // ocuppy slot
                    countJobs++;
                    jobProfit += arr[i].profit;
                    break;
                }
            }
        }
        
        return {countJobs, jobProfit};
    } 
};

// TC : O(nlogn)
// SC : O(n)

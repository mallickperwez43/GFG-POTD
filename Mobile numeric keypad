// Method 1 : dp

/* Intution
   consider the button as the matrix 
    i/j  0 1 2 
    0    1 2 3 
    1    4 5 6 
    2    7 8 9 
    3    * 0 #
    
    catch is that (3, 0) and (3, 2) isnt visitable bcoz (3, 0) is '*' and (3, 2) is '#'
    
    visit in all the rest matrix in all possible paths and calculate result
*/

class Solution {
  public:
    long long helper(int i , int j, int n, vector<vector<vector<long long>>> &dp){
        // out of bound
        if(i < 0 or i > 3 or j < 0 or j > 2) 
            return 0;
        if(i == 3 and (j == 0 or j == 2))
            return 0;
            
        // ending case 
        if(n == 1) 
            return 1;
        
        if(dp[i][j][n] != -1)
            return dp[i][j][n];
        
        n--;
        
        // n + 1 becoz we did n-- so to access n after n - 1 we added 1 
        return dp[i][j][n + 1] = helper(i - 1, j, n, dp) + helper(i, j + 1, n, dp) + helper(i + 1, j, n, dp) 
               + helper(i, j - 1, n, dp) + helper(i, j, n, dp);
    
    }
     
    long long getCount(int n) {
        // Your code goes here
        long long ans = 0;
        vector<vector<vector<long long>>> dp(4, vector<vector<long long>>(3, vector<long long>(n + 1, -1)));
        for(int i = 0; i < 4; i++){
            for(int j = 0; j < 3; j++){
                // corner case 
                if(i == 3 and (j == 0 or j == 2)) continue;
                
                ans += helper(i, j , n, dp);
            }
        }
        
        return ans;
    }
};

// TC : O(n)
// SC : O(n) -> while not considering 4 * 3


// Method 2 : space optimisation

/* Intution 
   We just know that for length 1 we can have every number from 0 - 9 that is 10
   using that as a base case we can just find out that we can find out for every 
   nums of 0 - 9 how many numbers of length i from 2 to  n can be formed in every iteration 
   then sum it up
*/
   

class Solution {
  public:
    long long getCount(int n) {
        // Your code goes here
        // Base case: if length is 1, return 10 (all digits 0-9)
        if(n == 1) return 10; 
        
        // Define the neighbours according to knight's move rules
        list<long long int> neighbours[10] = {
            {0, 8}, {1, 2, 4}, {2, 1, 3, 5}, {3, 2, 6}, {4, 1, 5, 7}, 
            {5, 2, 4, 6, 8}, {6, 3, 5, 9}, {7, 4, 8}, {8, 7, 5, 9, 0},
            {9, 8, 6}
        };
        
        // Initialize count array with 1 (for length 1, each digit can form itself)
        long long int count[10];
        for(int i = 0; i < 10; i++) count[i] = 1;
        
        // Iterate for each length from 2 to n
        for(int i = 2; i <= n; i++) {
            // Temporary array to store new counts
            long long int countTemp[10] = {0};
            for(int j = 0; j < 10; j++) {
                // Sum up counts for all possible moves for current digit j
                for(auto neighbour : neighbours[j])
                    countTemp[neighbour] += count[j];
            }
            
            // Update the count array for the next iteration
            for(int j = 0; j < 10; j++) 
                count[j] = countTemp[j];
        }
        
        // Sum up the counts to get the total number of possible numbers of length n
        long long int total = 0;
        for(int i = 0; i < 10; i++)
            total += count[i];
        
        return total;
    }
};

// TC : O(n)
// SC : O(1)

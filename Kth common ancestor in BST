/*// A Tree node
struct Node
{
	int data;
	struct Node *left, *right;
};*/


class Solution
{
    public:
    
    /*You are required to complete below function */
    int kthCommonAncestor(Node *root, int k,int x, int y)
    {
        // your code goes here
        // total common ancestor is one because its root
        int total = 1;  
        Node *temp = root;   // storing the root
        while(root){
            // if both nodes lies on the left side
            if(root -> data > x and root -> data > y){
                root = root -> left;
                total++;
            }
            // if both nodes lies on the right side
            else if(root -> data < x and root -> data < y){
                root = root -> right;
                total++;
            }
            // either nodes lies on either side
            else break;
        }
        
        // out of all the common ancestor subtact k because we need kth common ancestor
        total -= k;
        total++; // add one to total to get the kth one
        
        // retraverse the tree until the kth CA is found
        
        int count = 1;  
        root = temp;
        
        while(root){
            if(total == count) // if found then return node data
                return root -> data;
                
            if(root -> data > x and root -> data > y){
                root = root -> left;
                count++;
            }
            else if(root -> data < x and root -> data < y){
                root = root -> right;
                count++;
            }
            else break;
        }
        
        // no kth common ancestor exist
        return -1;
    }
};


TC : O(H)
SC : O(1)

/* Intution 
   Basically every pair has to be dependant to prev length pair
   as same as Longest Common Subsequence
   
   Approach
   1] as one size substring is always a palindrome so make a dp of n size all with zero 
   2] so we have just have to start iteration from 2nd to last length including 
   3] rows max limit is n - i (for every row)
        calculate col as row + i - 1 (abc) row is 0 so i should be one
        
        if the character at both the ends of row and col matches 
        get the internal matching 
        row + 1, col - 1
        
        else 
        2 option 
        get the cur lenght - 1 subtring 
        row + 1 , col 
        row, col - 1
        
        since both doesnt macthes 
        so i got to remove cur character too so (+ 1)
   
    4] if the dp[0][n -1] is less than k -> the minimum character required to make string palindrome
    
*/
class Solution{
public:
    int kPalindrome(string str, int n, int k)
    {
        // code here
        int dp[n][n];
        memset(dp,0, sizeof dp);
        
        for(int i = 2; i <= n; i++){
            for(int row = 0; row <= n - i; row++){
                int col = row + i - 1;
                
                if(str[row] == str[col]){
                    dp[row][col] = dp[row + 1][col - 1];
                }
                else{
                    dp[row][col] = min(dp[row + 1][col], dp[row][col - 1]) + 1;
                }
            }
        }
        
        return dp[0][n - 1] <= k ? 1 : 0;
    }
};

// TC : O(n * n)
// SC : O(n * n)

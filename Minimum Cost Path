

class Solution
{
    public:
    typedef pair<int, pair<int, int>> P;
    //Function to return the minimum cost to react at bottom
	//right cell from top left cell.
    int minimumCostPath(vector<vector<int>>& grid) 
    {
        // Code here
        int rowDir[4] = {-1, 0, 1, 0};
        int colDir[4] = {0, 1, 0, -1};
        
        int n = grid.size();
        int m = grid[0].size();
        
        vector<vector<bool>> visited(n, vector<bool>(m, false));
        vector<vector<int>> distance(n, vector<int>(m, INT_MAX));
        
        priority_queue<P, vector<P>, greater<P>> pq;
        
        pq.push({grid[0][0], {0, 0}}); // (dist , (i, j))
        distance[0][0] = grid[0][0];
        
        while(!pq.empty()){
            // row, col
            int row = pq.top().second.first;
            int col = pq.top().second.second;
            pq.pop();
            
            if(visited[row][col]) continue;
            
            visited[row][col] = true; // mark visited
            
            // go for all 4 possible directions
            for(int i = 0; i < 4; i++){
                int newR = row + rowDir[i];
                int newC = col + colDir[i];
                
                if(newR >= 0 && newR < n && newC >=0 && newC < m){
                    if(distance[newR][newC] > distance[row][col] + grid[newR][newC]){
                        distance[newR][newC] = distance[row][col] + grid[newR][newC];
                        pq.push({distance[newR][newC], {newR, newC}});
                    }
                }
            } 
        }
        
        return distance[n - 1][m - 1];
    }
};

// TC : O(n^2 * logn)
// SC : O(n^2)

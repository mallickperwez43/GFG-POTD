class Solution
{
    private:
        vector<int> prefix_function(string s) {
            int n = (int)s.length();
            vector<int> pi(n);
            for (int i = 1; i < n; i++) {
                int j = pi[i-1];
                while (j > 0 && s[i] != s[j])
                    j = pi[j-1];
                if (s[i] == s[j])
                    j++;
                pi[i] = j;
            }
            return pi;
        }
    public:
        vector <int> search(string pat, string txt)
        {
            //code here
            string look = pat + '?' + txt;
            
            vector<int> kmp = prefix_function(look);
            
            vector<int> ans;
            
            int start = 2 * pat.size();
            for(int i = start; i < look.size(); i++){
                if(kmp[i] == pat.size())
                    ans.push_back(i - start + 1);
            }
            
            return ans;
        }
     
};


// another way to code

class Solution {
  public:
    void fillLPS(string& newStr, vector<int>& LPS){
        int len = 0; // length pf prev longest prefix which matches suffix
        int i = 1; // start from second char becoz single char dont have the suffix 
        int n = newStr.length();
        
        while(i < n){
            if(newStr[i] == newStr[len]){ // match
                LPS[i] = len + 1;
                len++;
                i++;
            }
            else{
                if(len == 0){
                    LPS[i] = 0;  // no match 
                    i++;
                }
                else{
                    len = LPS[len - 1]; // prev longest prefix and suffix 
                }
            }
        }
    }
    
    vector<int> search(string& pat, string& txt) {
        // code here
        int n = pat.length();
        
        string newStr = pat + '#' + txt;
        int m = newStr.length();
        
        vector<int> LPS(newStr.length(), 0);
        
        fillLPS(newStr, LPS); 
        
        vector<int> result;
        
        int startIdx = n + 1; // pat len + '#'
        
        while(startIdx < m){
            if(LPS[startIdx] == n){
                result.push_back(startIdx - LPS[startIdx] - n);
            }
            startIdx++;
        }
        
        return result;
    }
};

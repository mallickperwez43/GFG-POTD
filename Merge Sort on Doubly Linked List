/* Structure of the node of the list is as
struct Node
{
    int data;
    struct Node *next, *prev;
    Node (int x){
        data = x;
        next = prev = NULL;
    }
};
*/

class Solution {
  public:
    // find mid
    struct Node* findMid(struct Node *head){
        Node *fast = head, *slow = head;
        while(fast -> next and fast -> next -> next){
            fast = fast -> next -> next;
            slow = slow -> next;
        }
        return slow;
    }
    
    struct Node *merge(struct Node* left, struct Node* right){
        if(left == NULL) return right;
        if(right == NULL) return left;
        
        // get the start node of the DLL
        Node *h1 = NULL, *cur = NULL;
        if(left -> data <= right -> data){
            h1 = left;
            cur = left;
            left = left -> next;
        }
        else{
            h1 = right;
            cur = right;
            right = right -> next;
        }
        
        // merge 
        while(left and right){
            if(left -> data < right -> data){
                cur -> next = left;
                left -> prev = cur;
                cur = cur -> next;
                left = left -> next;
            }
            else{
                cur -> next = right;
                right -> prev = cur;
                cur = cur -> next;
                right = right -> next;
            }
        }
        
        while(left){
            cur -> next = left;
            left -> prev = cur;
            cur = cur -> next;
            left = left -> next;
        }
        
        while(right){
            cur -> next = right;
            right -> prev = cur;
            cur = cur -> next;
            right = right -> next;
        }
        
        return h1;
    }
    // Function to sort the given doubly linked list using Merge Sort.
    struct Node *sortDoubly(struct Node *head) {
        // Your code here
        
        // base case
        if(head == NULL or head -> next == NULL)
            return head;
        
        // find mid 
        Node *mid = findMid(head);
        
        // split the LL into two halves
        Node* left = head;
        Node* right = mid -> next;
        mid -> next = NULL;
        right -> prev = NULL;
        
        // sort both the halves
        left = sortDoubly(left);
        right = sortDoubly(right);
        
        // merge both halves
        Node* ansHead = merge(left, right);
        
        return ansHead;
    }
};

// TC : O(nlogn)
// SC : O(logn)

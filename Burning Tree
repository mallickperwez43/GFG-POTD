//User function Template for C++

/*
struct Node {
    int data;
    Node *left;
    Node *right;

    Node(int val) {
        data = val;
        left = right = NULL;
    }
};
*/
class Solution {
  public:
    Node* createParentMapping(Node* root, int target, map<Node*, Node*> &nodeToParent){
        // Level Order Traversal
        Node *resultNode = NULL;
        
        queue<Node*> q;
        q.push(root);
        nodeToParent[root] = NULL;
        
        while(!q.empty()){
            Node* frontNode = q.front();
            q.pop();
            
            // check target
            if(frontNode -> data == target){
                resultNode = frontNode;
            }
            
            if(frontNode -> left){
                nodeToParent[frontNode -> left] = frontNode;
                q.push(frontNode -> left);
            }
            
            if(frontNode -> right){
                nodeToParent[frontNode -> right] = frontNode;
                q.push(frontNode -> right);
            }
        }
        
        return resultNode;
    }
    
    int burnTreeFromTarget(Node* root, map<Node*, Node*> &nodeToParent){
        map<Node*, bool> visited;
        // LOT
        queue<Node*> q;
        int timeMin = 0;
        
        q.push(root);
        visited[root] = true;
        
        while(!q.empty()){
            bool hasAddedInQueue = false; // indication
            
            int size = q.size();
            // for every neighbour
            for(int i = 0; i < size; i++){
                Node* frontNode = q.front();
                q.pop();
                
                // left
                if(frontNode -> left && !visited[frontNode -> left]){
                    q.push(frontNode -> left);
                    visited[frontNode -> left] = true;
                    hasAddedInQueue = true;
                }
                
                // right
                if(frontNode -> right && !visited[frontNode -> right]){
                    q.push(frontNode -> right);
                    visited[frontNode -> right] = true;
                    hasAddedInQueue = true;
                }
                
                // parent
                if(nodeToParent[frontNode] && !visited[nodeToParent[frontNode]]){
                    q.push(nodeToParent[frontNode]);
                    visited[nodeToParent[frontNode]] = true;
                    hasAddedInQueue = true;
                }
                
            }
            if(hasAddedInQueue){
                timeMin++;
            }
        }
        
        return timeMin;
    }
    
    int minTime(Node* root, int target) 
    {
        // Your code goes here
        // 1] create parent to node mapping
        // 2] find the target node
        // 3] using target node as root , traverse the tree and consider min time
        
        map<Node*, Node*> nodeToParent;
        Node* targetNode = createParentMapping(root, target, nodeToParent); // step 1 & 2
        
        int minTime = burnTreeFromTarget(targetNode, nodeToParent); // step 3
        
        return minTime;
    }
};

// BFS

/* A binary tree node has data, pointer to left child
   and a pointer to right child /
struct Node
{
    int data;
    Node* left;
    Node* right;
}; */

class Solution
{
    public:
    // function should print the nodes at k distance from root
    vector<int> Kdistance(struct Node *root, int k)
    {
        // Your code here
        vector<int> ans;
        int level = 0;
        queue<Node*> q;
        q.push(root);
      
        while(!q.empty()){
            int n = q.size();
          
            for(int i = 0; i < n; i++){
                Node* frontNode = q.front();
                q.pop();
                
                if(level == k)
                    ans.push_back(frontNode -> data);
                else{
                    if(frontNode -> left) 
                        q.push(frontNode -> left);
                    if(frontNode -> right)
                        q.push(frontNode -> right);
                }
            }
            level++;
        }
        
        return ans;
    }
};

// TC : O(n)
// SC : O(n)

// DFS

class Solution
{
    private:
    void dfs(struct Node *root, int k, vector<int> &ans){
        // base case
        if(k == 0){
            ans.push_back(root -> data);
        }
        
        if(root -> left){
            dfs(root -> left, k - 1, ans);
        }
        if(root -> right){
            dfs(root -> right, k - 1, ans);
        }
        
        return;
    }
    public:
    // function should print the nodes at k distance from root
    vector<int> Kdistance(struct Node *root, int k)
    {
      // Your code here
      vector<int> ans;
      dfs(root, k, ans);
      return ans;
    }
};

// TC : O(n)
// SC : O(n)

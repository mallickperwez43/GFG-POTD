/* Link list Node
struct Node {
    int data;
    Node *next;
    Node *random;

    Node(int x) {
        data = x;
        next = NULL;
        random = NULL;
    }
};*/

class Solution {
  public:
    void insertAtTail(Node* &head, Node* &tail, int DATA){
        Node* newNode = new Node(DATA);
        if(head == NULL){
            head = newNode;
            tail = newNode;
            return;
        }
        else{
            tail -> next = newNode;
            tail = newNode;
        }
    }
    
    Node *copyList(Node *head) {
        // Write your code here
        Node* cloneHead = NULL;
        Node* cloneTail = NULL;
        
        // step 1 : create a clone list
        Node* temp = head;
        
        while(temp != NULL){
            insertAtTail(cloneHead, cloneTail, temp -> data);
            temp = temp -> next;
        }
        
        // step 2 : connect original and clone alternatingly
        Node* originalNode = head;
        Node* cloneNode = cloneHead;
        
        while(originalNode != NULL && cloneNode != NULL){
            Node* nextNode = originalNode -> next;
            
            // set original
            originalNode -> next = cloneNode;
            originalNode = nextNode;
            
            nextNode = cloneNode -> next;
            
            // set clone
            cloneNode -> next = originalNode;
            cloneNode = nextNode;
        }
        
        // step 3 : set random of clone with the help of original random(traversing the 2x LL)
        temp = head;
        
        while(temp != NULL){
            if(temp -> next != NULL){
                temp -> next -> random = (temp -> random ? temp -> random -> next : temp -> random);
            }
            temp = temp -> next -> next;
        }
        
        // step 4 : revert changes done in step2 and seperate the original and clone list
        originalNode = head;
        cloneNode = cloneHead;
        
        while(originalNode != NULL && cloneNode != NULL){
            // set original 
            originalNode -> next = cloneNode -> next;
            originalNode = originalNode -> next;
            
            if(originalNode != NULL){
                cloneNode -> next = originalNode -> next;
            }
            cloneNode = cloneNode -> next;
        }
        
        // step 5 : return cloned list
        return cloneHead;
   }
}; 

// TC :O(n)
// SC :O(1)

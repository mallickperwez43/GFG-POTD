class Solution { 
  public:
    int minimizeDifference(int n, int k, vector<int> &arr) {
        // code here
        
        // step 1 :  make two vector to store the max and min for every index from right
        vector<int> rightMin(n, 0) , rightMax(n, 0);
        rightMin[n - 1] = arr[n - 1];
        rightMax[n - 1] = arr[n - 1];
        
        // fill it
        for(int i  = n - 2; i >= 0; i--){
            rightMax[i] = max(rightMax[i + 1], arr[i]);
            rightMin[i] = min(rightMin[i + 1], arr[i]);
        }
        
        // step 2 sliding window
        // setting pointers
        int i = 0, j = k - 1;
        
        // intitiallt nothing in left for index 0 setting base conditons
        int mn = INT_MAX, mx = INT_MIN, ans = INT_MAX;
        
        // sliding every window
        while(j < n){
            // not considering starting point 
            // left part min max
            if(i != 0){
                mn = min(arr[i - 1], mn);     // i - 1 because i to j will be window
                mx = max(arr[i - 1], mx);
            }
            int temp1 = mn, temp2 = mx;       // storing the min and max from the left part
            if(j != n - 1){
                temp1 = min(temp1, rightMin[j + 1]);    // j + 1 because we want after window
                temp2 = max(temp2, rightMax[j + 1]);
            }
            ans = min(ans, abs(temp2 - temp1));    // minizing every time
            // increment to move the window ahead
            i++;
            j++;
        }
        return ans;
    }
};
// TC : O(n)
// SC : O(n)
